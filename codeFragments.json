{"codeFragments":[{"label":"cat_file_open","content":"    with open(_object_path(obj), 'rb') as f:\n        content = zlib.decompress(f.read())\n\n    [metadata, obj] = content.split(b'\\0', 1)"},{"label":"cat_file_blob","content":"        try:\n            print(obj.decode())\n        except UnicodeDecodeError:\n            log.debug('Unable to decode, printing as is')\n            print(obj)"},{"label":"cat_file_tree","content":"        tree_object = Tree.from_string(obj)\n        for entry in tree_object.entries:\n            mode = entry.mode.decode()\n            if mode == '40000':\n                mode = '0' + mode\n                object_type = 'tree'\n            else:\n                object_type = 'blob'\n\n            print('%s %s %s\\t%s' % (\n                mode, object_type, entry.sha1, entry.name.decode()))"},{"label":"cat_file_commit","content":"        commit_object = Commit.from_string(obj)\n        print('tree %s' % commit_object.tree.decode())\n        for parent in commit_object.parents:\n            print('parent %s' % parent.decode())\n        print('author %s' % commit_object.author)\n        print('committer %s' % commit_object.committer)\n        print('\\n%s' % commit_object.message.decode())"},{"label":"hash_object_print","content":"    header = '%s %d\\0' % (object_type, len(obj))\n    header = header.encode()\n    content = header + obj\n\n    sha = hashlib.sha1(content)\n    print(sha.hexdigest())"},{"label":"hash_object_write","content":"        path = _object_path(sha.hexdigest())\n        pathlib.Path(path).parent.mkdir(parents=True, exist_ok=True)\n\n        with open(path, 'wb') as f:\n            f.write(zlib.compress(content))"},{"label":"ls_files","content":"    idx = _index()\n    for _, entry in idx.entries.items():\n        # why the -1? Well the mode type is 1000, 1010 or 1100 and\n        # permissions 0755 or 0644 so git decides to cut a 0 when\n        # concatenating them.\n        mode = '%s%s' % (bin(entry.mode_type)[\n                         2:-1], oct(entry.mode_permissions)[2:])\n        print('%s %s %s\\t%s' % (\n            mode, entry.sha1, entry.stage_flag, entry.name))"},{"label":"update_index","content":"    idx = _index()\n\n    idx.append(Index.Entry(new=True, mode=mode, sha=sha, filename=filename))\n\n    packed = idx.pack()\n    with open(_git_path('index'), 'wb') as f:\n        f.write(packed)"},{"label":"write_tree","content":"    idx = _index()\n\n    tree_entries = []\n    for _, entry in idx.entries.items():\n        tree_entries.append(Tree.Entry(mode_type=entry.mode_type,\n                                       mode_permissions=entry.mode_permissions, sha=entry.sha1, name=entry.name))\n\n    tree_object = Tree(tree_entries)\n    hash_object(tree_object.pack(), write=True, object_type='tree')"},{"label":"commit_tree","content":"    tree = _resolve_object_sha(tree)\n    parent = _resolve_object_sha(parent)\n    c = Commit.create(tree, message, parent)\n    hash_object(c.pack(), write=True, object_type='commit')"},{"label":"update_ref","content":"    sha = _resolve_object_sha(sha)\n    with open(_git_path(ref), 'w') as f:\n        log.info('writing %s to %s' % (sha, _git_path(ref)))\n        f.write(sha)"}]}